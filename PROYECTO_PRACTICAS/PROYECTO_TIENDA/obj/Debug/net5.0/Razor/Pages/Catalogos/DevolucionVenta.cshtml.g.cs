#pragma checksum "C:\Sistema\COMPV2022-G5\PROYECTO_PRACTICAS\PROYECTO_TIENDA\Pages\Catalogos\DevolucionVenta.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6bed587983dd0d503f159c6daa1f5c32190b2a90"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(PROYECTO_TIENDA.Pages.Catalogos.Pages_Catalogos_DevolucionVenta), @"mvc.1.0.razor-page", @"/Pages/Catalogos/DevolucionVenta.cshtml")]
namespace PROYECTO_TIENDA.Pages.Catalogos
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Sistema\COMPV2022-G5\PROYECTO_PRACTICAS\PROYECTO_TIENDA\Pages\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Sistema\COMPV2022-G5\PROYECTO_PRACTICAS\PROYECTO_TIENDA\Pages\_ViewImports.cshtml"
using PROYECTO_TIENDA;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Sistema\COMPV2022-G5\PROYECTO_PRACTICAS\PROYECTO_TIENDA\Pages\_ViewImports.cshtml"
using PROYECTO_TIENDA.Data;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6bed587983dd0d503f159c6daa1f5c32190b2a90", @"/Pages/Catalogos/DevolucionVenta.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1589a794a507b402e5738872327c01bae8496fb4", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Catalogos_DevolucionVenta : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "0", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Activo", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Anulado", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<script type=""module"">

    import CreateTable from '../js/TableComponent.js';
    import CreateDropDown from '../js/DropDownComponent.js';
    const DetallesVenta = [];//para guardar
    const DetallesDevolucion = [];//para guardar


    let detallesDev
    let detalles; //guarda el filtrado

    let venta;
    let devoluciones;

    let Detalleventa; //aqui guardo response
    let arrayObtenido;

    const CargarDatos = async () => {
        let UrlDevolucionV = ""../api/DevolucionVenta/VerDevolucion"";
        let response = await fetch(UrlDevolucionV, {
            method: ""POST"",
            headers: {
                'Content-Type': ""application/json; charset=utf-8"",
                'Accept': ""*/*""
            }
        });
        response = await response.json();

        //CARGAR TODOS LAS LISTAS
        console.log(response);

        venta = response[0];
        Detalleventa = response[1];

        //CARGA TABLA Venta y Detalle
        CreateTableDevolver(venta, T");
            WriteLiteral(@"ablaVenta, verDetalles, ""Devolver"");
        /*CreateTable(Detalleventa, TableDetalleVenta)*/


        //MODAL INVENTARIO
        CreateTable(response[5], TableProducto, FunctionSeleccionar,""Seleccionar"");

        //DROPDOWN
        CreateDropDown(response[3], DropUsuarioD, ""idUsuario"", ""usuario"")
        CreateDropDown(response[4], DropClienteD, ""idCliente"", ""nombres"")
        CreateDropDown(response[6], DropMedidaV, ""idMedida"", ""medida"")


    }
    //SELECCION DE ITEM DE INVENTARIO
    const FunctionSeleccionar = async (Item) => {
        TxtproductoV.value = Item.idProducto;
        /*TxtNproducto.value = Item.producto;*/
        TxtInventV.value = Item.idInventario;
        TxtprecioV.value = Item.precioCompra;
        ModalFunction(ModalProducto)
    }

    //CALCULO DE PORCENTAJES
    TxtcantidadV.onkeyup = (ev) => {
        //const stockTotal = parseInt(TxtStockActual.value) + parseInt(ev.target.value);
        //if (stockTotal > TxtStockMaximo.value) {
        //    alert");
            WriteLiteral(@"('Cantidad Ingresada mayor al Stock, Revisa el Inventario')
        //    ModalFunction(ModalProducto)
        //}
        txtsubtotalV.value = TxtprecioV.value * ev.target.value;
        TxtivaV.value = txtsubtotalV.value * 0.15;
        TxttotalV.value = parseFloat(txtsubtotalV.value) + parseFloat(TxtivaV.value);
    }

    //CALCULO DE DESCUENTO
    TxtDescuentoV.onkeyup = (ev) => {
        TxttotalV.value = parseFloat(TxttotalV.value) - ev.target.value;
    }
    const anularDetalles = async (obj = {}) => {
        console.log(obj)
        DropEstadoD.value = ""Anulado"";
        console.log(DropEstadoD.value)


    }


    const verDetalles = async (obj = {}) => {

        DropClienteD.value = obj.cliente;
        DropUsuarioD.value = obj.idUsuario;
        TxtVentaD.value = obj.idVenta;
        DropClienteV.value = obj.cliente;
        DropUsuarioV.value = obj.idUsuario;
        TxttotalV.value = obj.total;


        /*PARA EL DETALLEVENTA*/
        detalles = Detalleventa.");
            WriteLiteral(@"filter(x => x.idVenta == obj.idVenta)
      
        /*PARA LOS DETALLES DEVOLUCION*/
        detallesDev = Detalleventa.filter(x => x.idVenta == obj.idVenta)

        arrayObtenido = detallesDev.map(function (elem) {
            let returnObjeto = { IdProducto: elem.idProducto, IdInventario: elem.idInventario, Cantidad: elem.cantidad, Estado: DropEstadoD.value = ""Vendido"" };
            return returnObjeto;
        });

        DetallesDevolucion.push(arrayObtenido)

        
        CreateTableDV(arrayObtenido, TableDevolucion, anularDetalles, ""Anular"")
        /*CreateTableDV(arrayObtenido, TableDevolucion, anularDetalles, ""Anular"")*/
        console.log(""arrayObtenido"")
        console.log(DetallesDevolucion)
        console.log(arrayObtenido)

    }

    function CreateTableDV(Dataset = [], Table, TableFunction, BtnValue = ""Anular"") {
        const thead = Table.querySelector(""thead""); //dataset= response, table=nombre de la tabla-tableproducto,?,?
        const tbody = Table.query");
            WriteLiteral(@"Selector(""tbody"");//tbody = cuerpo de tabla, thead=encabezado de tabla
        thead.innerHTML = """";
        tbody.innerHTML = """";


        Dataset.forEach((item, index) => {
            const row = document.createElement(""tr"");//filas
            for (var prop in item) {

                if (index == 0) {

                    const th = document.createElement(""th"");//encabezados
                    th.innerText = prop;
                    thead.append(th);
                }
                const td = document.createElement(""td""); //tabledata
                td.innerText = item[prop];
                row.append(td);
            }
            if (index == 0) {

                const boton = document.createElement(""th"");
                boton.innerText = ""Anular"";
                thead.append(boton);

            }
            const tdAction = document.createElement(""td"");
            const btn = document.createElement(""input"");

            btn.type = ""button"";
            btn.cl");
            WriteLiteral(@"assName = ""BTN BTNOK"";
            btn.value = BtnValue;
            btn.onclick = (obje = {}) => {
                const Eliminar = detalles.indexOf(obje);
                detalles.splice(Eliminar, 1);
                DetallesVenta.push(detalles);
                console.log(""DetallesVenta"")
                console.log(DetallesVenta);

                CreateTable(detalles, TableDetalleVenta)
                ModalFunction(ModalVentaDetalles);
                //arrayObtenido.Estado = DropEstadoD.value = ""Anulado"";
                //TableFunction(item);

                //const Eliminar = detalles.indexOf(obje);
                //detalles.splice(Eliminar, 1);
                //console.log(detalles);
                ///*DetallesVenta.push(detalles)*/
                //console.log(DetallesVenta);
                //console.log(arrayObtenido);
                //DetallesDevolucion.push(arrayObtenido)
                //CreateTable(detalles, TableDetalleVenta)
                //ModalFunction(Moda");
            WriteLiteral(@"lVentaDetalles);
            }

            tdAction.append(btn);
            row.append(tdAction);
            tbody.append(row);

        });

    }
    function CreateTableDevolver(Dataset = [], Table, TableFunction, BtnValue = ""Restaurar"") {
        const thead = Table.querySelector(""thead""); //dataset= response, table=nombre de la tabla-tableproducto,?,?
        const tbody = Table.querySelector(""tbody"");//tbody = cuerpo de tabla, thead=encabezado de tabla
        thead.innerHTML = """";
        tbody.innerHTML = """";


        Dataset.forEach((item, index) => {
            const row = document.createElement(""tr"");//filas
            for (var prop in item) {

                if (index == 0) {

                    const th = document.createElement(""th"");//encabezados
                    th.innerText = prop;
                    thead.append(th);
                }
                const td = document.createElement(""td""); //tabledata
                td.innerText = item[prop];
       ");
            WriteLiteral(@"         row.append(td);
            }
            if (index == 0) {
                const th = document.createElement(""th"");
                th.innerText = ""Devolucion"";
                thead.append(th);

            }
            const tdAction = document.createElement(""td"");
            const btn = document.createElement(""input"");
            btn.type = ""button"";
            btn.className = ""BTN BTNOK"";
            btn.value = BtnValue;
            btn.onclick = () => {
                ModalFunction(ModalVenta);
                TableFunction(item);
            }
            tdAction.append(btn);
            row.append(tdAction);
            tbody.append(row);

        });

    }


    btnDetalleV.onclick = (Objdetalle = {}) => {

        let cantidad = document.getElementById('TxtcantidadV');
        let producto = document.getElementById('TxtproductoV');


        //if (TxtDescuento.value == """" || undefined) TxtDescuento.value = 0

        if (cantidad.value === '' || pro");
            WriteLiteral(@"ducto.value === '') {
            alert('Rellena el todos los campos')


        } else {

            Objdetalle = {
                IdInventario: TxtInventV.value,
                IdProducto: TxtproductoV.value,
                Precio: TxtprecioV.value,
                Cantidad: TxtcantidadV.value,
                IdMedida: DropMedidaV.value,
                Subtotal: txtsubtotalV.value,
                IVA: TxtivaV.value,
                Descuento: TxtDescuentoV.value,
                Total: TxttotalV.value
            }
        }
        detalles.push(Objdetalle);
        console.log(detalles);
        CreateTable(detalles, TableDetalleVenta)

        //DetallesVenta.forEach((objeto) => {
        //    CreateTableDetalle(DetallesVenta, TableVD);

        //})
        // SUMA TOTAL DETALLES
        function sumaTotales(DetallV) {
            const suma = DetallV.map(D => D.Total).reduce((a, v) => parseInt(a) + parseInt(v), 1);
            TxttotalV.value = suma;

        }
 ");
            WriteLiteral(@"       sumaTotales(DetallesVenta);
    }
    
    BtnSaveV.onclick = async () => {
            let UrlVenta = ""../api/Venta/GuardarVenta"";
            const ObjInst = {
                IdVenta: TxtVentaV.value,
                Fecha: TxtfechaV.value,
                Descripcion: TxtdescripcionV.value,
                Cliente: DropClienteV.value,
                IdUsuario: DropUsuarioV.value,
                Total: TxttotalV.value,
                Estado: DropEstadoV.value,
                DetallesV: DetallesVenta

            }
            let flag = true;
            for (var prop in ObjInst) {
                if (ObjInst[prop] == """") {
                    flag = false;
                    alert(""la propiedad "" + prop + "" es requerida"");
                    break;
                }
            }

            if (!flag) {
                return;
            }

            let response = await fetch(UrlVenta, {
                method: ""POST"",
                headers: {
         ");
            WriteLiteral(@"           'Content-Type': ""application/json; charset=utf-8"",
                    'Accept': ""*/*""
                },
                body: JSON.stringify(ObjInst)
            });
            response = await response.json();
            if (response == true) {
                alert(""Datos Guardados"");
                CargarDatos();
                location.reload()
            }

    }
    CargarDatos()
    

    window.onload = async () => {

        BtnSaveD.onclick = async () => {
            let UrlDevolucion = ""../api/DevolucionVenta/GuardarDevolucion"";//--
            const ObjInst = {
                IdDevolucion: Txtdevolucion.value,
                IdCliente: DropClienteD.value,
                IdVenta: TxtVentaD.value,
                IdUsuario: DropUsuarioD.value,
                Fecha: TxtfechaD.value,
                Observaciones: TxtdescripcionD.value,
                Total: TxttotalD.value,
                DetallesV: DetallesDevolucion

            }
            ");
            WriteLiteral(@"let flag = true;
            for (var prop in ObjInst) {
                if (ObjInst[prop] == """") {
                    flag = false;
                    alert(""la propiedad "" + prop + "" es requerida"");
                    break;
                }
            }

            if (!flag) {
                return;
            }

            let response = await fetch(UrlDevolucion, {
                method: ""POST"",
                headers: {
                    'Content-Type': ""application/json; charset=utf-8"",
                    'Accept': ""*/*""
                },
                body: JSON.stringify(ObjInst)
            });
            response = await response.json();
            if (response == true) {
                alert(""Datos Guardados"");
                CargarDatos();
                location.reload()
                ModalFunction(ModalVentaDetalles);
            }

        }
        CargarDatos();


    }
    CargarDatos();

    BtnModalProductoV.onclick = () => {
 ");
            WriteLiteral(@"       ModalFunction(ModalProducto);
    }
    BtnCerrarProducto.onclick = () => {
        ModalFunction(ModalProducto);
    }
    BtnAbrirVenta.onclick = () => {
        ModalFunction(ModalVenta);
    }

    BtnCerrarVenta.onclick = () => {
        ModalFunction(ModalVenta);
    }
    btnCerrarMV.onclick = () => {
        ModalFunction(ModalVentaDetalles);
    }

</script>


<h2 style=""margin-left:40rem"">DEVOLUCIONES DE VENTA</h2>

");
            WriteLiteral(@"<div class=""FrmContainerDetalleV"">

    <div hidden=""true"">
        IddDevolucion:
        <input class=""TxtForm"" type=""number"" id=""Txtdevolucion"" placeholder=""Propiedad..."" value=""-1"" />
    </div>
    <div hidden=""true"">
        IdVenta:
        <input class=""TxtForm"" type=""number"" id=""TxtVentaD"" placeholder=""Propiedad..."" value=""-1"" />
    </div>
    <div>
        Fecha:
        <input class=""TxtForm"" type=""date"" id=""TxtfechaD"" placeholder=""Propiedad..."" />
    </div>

    <div>
        Descripcion:
        <input class=""TxtForm"" type=""text"" id=""TxtdescripcionD"" placeholder=""Propiedad..."" />
    </div>

    <div>
        Cliente:
        <select class=""TxtForm"" id=""DropClienteD"">
            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6bed587983dd0d503f159c6daa1f5c32190b2a9018349", async() => {
                WriteLiteral("Seleccionar Cliente");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        </select>\r\n    </div>\r\n\r\n    <div>\r\n        Usuario:\r\n        <select class=\"TxtForm\" id=\"DropUsuarioD\">\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6bed587983dd0d503f159c6daa1f5c32190b2a9019664", async() => {
                WriteLiteral("Seleccionar Usuario");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
        </select>
    </div>

    <div>
        Total:
        <input class=""TxtForm"" type=""text"" id=""TxttotalD"" placeholder=""Propiedad..."" />
    </div>
    <div>
        <input class=""BtnGuardarV"" type=""button"" id=""BtnSaveD"" value=""Guardar"" />
        <input class=""BtnGuardarV"" type=""button"" id=""BtnAbrirVenta"" value=""SeleccionarVenta"" />
    </div>
</div>


");
            WriteLiteral("<div hidden=\"true\">\r\n");
            WriteLiteral(@"
    <div hidden=""true"">
        IdDetalleDV:
        <input class=""TxtForm"" type=""number"" id=""TxtIdDetalleDV"" placeholder=""Producto"" disabled />
    </div>

    <div hidden=""true"">
        IdDevolucion:
        <input class=""TxtForm"" type=""number"" id=""TxtIdDevolucion"" disabled />
    </div>

    <div style=""display:flex;"">
        <div>
            Producto:
            <input class=""TxtForm"" type=""text"" id=""TxtIdProdD"" placeholder=""Producto"" disabled />
        </div>

        <input type=""button"" id=""BtnModalProducto"" class=""BtnGuardarDEVV"" value=""+"" style=""height:40px; margin-top:30px;margin-left:20px"" />
    </div>

    <div>
        IdInventario:
        <input class=""TxtForm"" type=""number"" id=""TxtInventD"" disabled />
    </div>

    <div>
        Cantidad:
        <input class=""TxtForm"" type=""number"" id=""TxtcantidadD"" />
    </div>

    <div hidden=""true"">
        Total:
        <input class=""TxtForm"" type=""number"" id=""TxttotalD"" placeholder=""Propiedad..."" disabled />
 ");
            WriteLiteral("   </div>\r\n    <div>\r\n        Estado:\r\n        <select class=\"TxtForm\" id=\"DropEstadoD\">\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6bed587983dd0d503f159c6daa1f5c32190b2a9022553", async() => {
                WriteLiteral("Activo");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6bed587983dd0d503f159c6daa1f5c32190b2a9023725", async() => {
                WriteLiteral("Anulado");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        </select>\r\n    </div>\r\n\r\n    <div>\r\n        <button class=\"BtnGuardarV\" id=\"btnDetalleD\" style=\"margin-top:32px\">Guardar Detalles</button>\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n");
            WriteLiteral(@"
<div class=""ModalContent"" id=""ModalVentaDetalles"">
    <div class=""ContainerForm"">
        <div style=""display:flex; align-content:flex-end; align-items:flex-end; justify-content:flex-end "">
            <input type=""button"" id=""btnCerrarMV"" value=""X"" style=""background-color: white; color: black"" />
        </div>

        <h3 style=""margin-left:30rem"">Nueva Venta</h3>

        <div class=""FrmContainerDetalleV"">



            <div hidden=""true"">
                IdVenta:
                <input class=""TxtForm"" type=""number"" id=""TxtVentaV"" placeholder=""Propiedad..."" value=""-1"" />
            </div>
            <div>
                Fecha:
                <input class=""TxtForm"" type=""date"" id=""TxtfechaV"" placeholder=""Propiedad..."" />
            </div>

            <div>
                Descripcion:
                <input class=""TxtForm"" type=""text"" id=""TxtdescripcionV"" placeholder=""Propiedad..."" />
            </div>

            <div>
                Cliente:
                <selec");
            WriteLiteral("t class=\"TxtForm\" id=\"DropClienteV\">\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6bed587983dd0d503f159c6daa1f5c32190b2a9026285", async() => {
                WriteLiteral("Seleccionar Cliente");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                </select>\r\n            </div>\r\n\r\n            <div>\r\n                Usuario:\r\n                <select class=\"TxtForm\" id=\"DropUsuarioV\">\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6bed587983dd0d503f159c6daa1f5c32190b2a9027648", async() => {
                WriteLiteral("Seleccionar Usuario");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </div>

            <div>
                Total:
                <input class=""TxtForm"" type=""text"" id=""TxttotalV"" placeholder=""Propiedad..."" />
            </div>

            <div>
                Estado:
                <select class=""TxtForm"" id=""DropEstadoV"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6bed587983dd0d503f159c6daa1f5c32190b2a9029166", async() => {
                WriteLiteral("Activo");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6bed587983dd0d503f159c6daa1f5c32190b2a9030346", async() => {
                WriteLiteral("Anulado");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </div>
            <div>
                <input class=""BtnGuardarV"" type=""button"" id=""BtnSaveV"" value=""Guardar"" />
            </div>
        </div>

        <h3 style=""margin-left:30rem"">Detalles</h3>
        <div class=""FrmContainerDetalleV"">

            <div style=""display:flex;"">
                <div>
                    IdProducto:
                    <input class=""TxtForm"" type=""number"" id=""TxtproductoV"" placeholder=""Producto"" disabled />
                </div>

                <input type=""button"" id=""BtnModalProductoV"" class=""BtnGuardarV"" value=""+"" style=""height:40px; margin-top:30px;margin-left:20px"" />
            </div>

            <div hidden=""true"">
                IdInventario:
                <input class=""TxtForm"" type=""number"" id=""TxtInventV"" disabled />
            </div>

            <div>
                Cantidad:
                <input class=""TxtForm"" type=""number"" id=""TxtcantidadV"" />
            </div>

            <");
            WriteLiteral("div>\r\n                Medida:\r\n                <select class=\"TxtForm\" id=\"DropMedidaV\">\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6bed587983dd0d503f159c6daa1f5c32190b2a9032725", async() => {
                WriteLiteral("Seleccionar Medida");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </div>

            <div>
                Precio:
                <input class=""TxtForm"" type=""number"" id=""TxtprecioV"" placeholder=""Propiedad..."" disabled />
            </div>

            <div hidden=""true"">
                Subtotal:
                <input class=""TxtForm"" type=""number"" id=""txtsubtotalV"" placeholder=""Propiedad..."" disabled />
            </div>

            <div hidden=""true"">
                IVA:
                <input class=""TxtForm"" type=""number"" id=""TxtivaV"" placeholder=""Propiedad..."" disabled />
            </div>

            <div>
                Descuento:
                <input class=""TxtForm"" type=""number"" id=""TxtDescuentoV"" placeholder=""Propiedad..."" />
            </div>

            <div hidden=""true"">
                Total:
                <input class=""TxtForm"" type=""number"" id=""TxttotalV"" placeholder=""Propiedad..."" />
            </div>
            <div>
                <button class=""BtnGuardarV"" id=""btnDeta");
            WriteLiteral(@"lleV"" style=""margin-top:32px"">Guardar Detalles</button>
            </div>

        </div>

        <table id=""TableDetalleVenta"" class=""FrmTable"">
            <thead>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>



");
            WriteLiteral(@"<!--<div class=""FrmContainerDetalleV"">
    <table class=""TablaMaestrosV"" id=""maestros"">
        <thead>
            <tr>
                <td>IdDetalleVenta</td>
                <td>IdVenta</td>
                <td>IdProducto</td>
                <td>IdInventario</td>-->
");
            WriteLiteral(@"<!--<td>Cantidad</td>
                <td>Medida</td>
                <td>Precio</td>
                <td>Subtotal</td>
                <td>IVA</td>
                <td>Descuento</td>
                <td>Total</td>

                <td>Eliminar</td>
            </tr>
        </thead>
        <tbody id=""bodyV"">
        </tbody>

    </table>
</div>-->
");
            WriteLiteral(@"<!--<div class=""FrmContainerDetalleV"">
    <table class=""TablaMaestrosV"">
        <thead>
            <tr>
                <td>IdDetalleVenta</td>
                <td>IdVenta</td>
                <td>IdProducto</td>
                <td>IdInventario</td>
                <td>Cantidad</td>-->
");
            WriteLiteral("<!--<td>Total</td>\r\n                <td>Estado</td>\r\n                <td>Eliminar</td>\r\n            </tr>\r\n        </thead>\r\n        <tbody id=\"body\">\r\n        </tbody>\r\n\r\n    </table>\r\n</div>-->\r\n");
            WriteLiteral("<table id=\"TableDevolucion\" class=\"FrmTable\">\r\n    <thead>\r\n    </thead>\r\n    <tbody>\r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n");
            WriteLiteral(@"<div class=""ModalContent"" id=""ModalVenta"">
    <div class=""ContainerForm"">
        <table id=""TablaVenta"" class=""FrmTable"">
            <thead>
            </thead>
            <tbody>
            </tbody>
        </table>

    </div>
    <input class=""BTN BTNOK2"" type=""button"" id=""BtnCerrarVenta"" value=""Cerrar"" />
</div>

");
            WriteLiteral("<div class=\"ModalContent\" id=\"ModalProducto\">\r\n    <div class=\"ContainerForm\" style=\"width:max-content\">\r\n        <input type=\"text\" id=\"TxtBusquedaProducto\" class=\"TxtFormDetalle\" placeholder=\"Buscar...\"");
            BeginWriteAttribute("value", " value=\"", 22028, "\"", 22036, 0);
            EndWriteAttribute();
            WriteLiteral(@" />
        <table id=""TableProducto"" class=""FrmTable"">
            <thead>
            </thead>
            <tbody>
            </tbody>
        </table>

        <div class=""FrmContainer"">
            <div>
                <input class=""BTN BTNOK2"" type=""button"" id=""BtnCerrarProducto"" value=""Cerrar"" />
            </div>
        </div>
    </div>
</div>

");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<PROYECTO_TIENDA.Pages.Catalogos.Devoluciones.DevolucionVentaModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<PROYECTO_TIENDA.Pages.Catalogos.Devoluciones.DevolucionVentaModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<PROYECTO_TIENDA.Pages.Catalogos.Devoluciones.DevolucionVentaModel>)PageContext?.ViewData;
        public PROYECTO_TIENDA.Pages.Catalogos.Devoluciones.DevolucionVentaModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
