<<<<<<< HEAD
#pragma checksum "C:\Users\USER\Desktop\COMPV2022-G5\PROYECTO_PRACTICAS\PROYECTO_TIENDA\Pages\Catalogos\MaestroDetalle\VentaView.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "25571cf44e6e664951ff6fd2dc8eeb8c4c614dbf"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(PROYECTO_TIENDA.Pages.Catalogos.MaestroDetalle.Pages_Catalogos_MaestroDetalle_VentaView), @"mvc.1.0.razor-page", @"/Pages/Catalogos/MaestroDetalle/VentaView.cshtml")]
namespace PROYECTO_TIENDA.Pages.Catalogos.MaestroDetalle
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\USER\Desktop\COMPV2022-G5\PROYECTO_PRACTICAS\PROYECTO_TIENDA\Pages\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\USER\Desktop\COMPV2022-G5\PROYECTO_PRACTICAS\PROYECTO_TIENDA\Pages\_ViewImports.cshtml"
using PROYECTO_TIENDA;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\USER\Desktop\COMPV2022-G5\PROYECTO_PRACTICAS\PROYECTO_TIENDA\Pages\_ViewImports.cshtml"
using PROYECTO_TIENDA.Data;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"25571cf44e6e664951ff6fd2dc8eeb8c4c614dbf", @"/Pages/Catalogos/MaestroDetalle/VentaView.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1589a794a507b402e5738872327c01bae8496fb4", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Catalogos_MaestroDetalle_VentaView : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "0", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Activo", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Inactivo", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<script type=""module"">
    import CreateTable from '../../js/TableComponent.js';
    import CreateDropDown from '../../js/DropDownComponent.js';
    let DetallesVenta = [];
    let venta;

    const CargarDatos = async () => {
        let UrlVenta = ""../../api/Venta/VerVenta"";
        let response = await fetch(UrlVenta, {
            method: ""POST"",
            headers: {
                'Content-Type': ""application/json; charset=utf-8"",
                'Accept': ""*/*""
            }
        });
        response = await response.json();
        venta = response[0]

        //CARGAR TODOS LAS LISTAS
        console.log(response);

        //CARGA TABLA VENTA
        // CreateTable(venta, TableVenta);

        //MODAL INVENTARIO
        CreateTable(response[5], TableProducto, FunctionSeleccionar, ""Seleccionar"");

        //DROPDOWN
        CreateDropDown(response[3], DropUsuario, ""idUsuario"", ""usuario"")
        CreateDropDown(response[1], DropCliente, ""idCliente"", ""nombres"")
      ");
            WriteLiteral(@"  CreateDropDown(response[4], DropMedida, ""idMedida"", ""medida"")

    }

    //SELECCION DE ITEM DE INVENTARIO
    const FunctionSeleccionar = async (Item) => {
        Txtproducto.value = Item.idProducto;
        TxtNproducto.value = Item.nombreProducto;
        TxtInvent.value = Item.idInventario;
        Txtprecio.value = Item.precioCompra;
        ModalFunction(ModalProducto)
    }

    //CALCULO DE PORCENTAJES
    Txtcantidad.onkeyup = (ev) => {
        //const stockTotal = parseInt(TxtStockActual.value) + parseInt(ev.target.value);
        //if (stockTotal > TxtStockMaximo.value) {
        //    alert('Cantidad Ingresada mayor al Stock, Revisa el Inventario')
        //    ModalFunction(ModalProducto)
        //}


        txtsubtotal.value = Txtprecio.value * ev.target.value;
        Txtiva.value = txtsubtotal.value * 0.15;

        if (txtsubtotal.value > 8000 && txtsubtotal.value < 14999) {
            TxtDescuento.value = txtsubtotal.value * 0.03;

        } else if (txtsu");
            WriteLiteral(@"btotal.value > 15000) {
            TxtDescuento.value = txtsubtotal.value * 0.05;
        } else {
            TxtDescuento.value = 0;

        }

        Txttotal.value = parseFloat(txtsubtotal.value) + parseFloat(Txtiva.value) - parseFloat(TxtDescuento.value)

    }

    //////TEXTO DE BUSQUEDA
    //TxtBusquedaVenta.onkeyup = (ev) => {
    //    const parametro = ev.target.value;
    //    const VentaFiltrados = venta.filter(x => x.descripcion.includes(parametro));
    //    CreateTable(VentaFiltrados, TableVenta);
    //}

    //TEXTO DE BUSQUEDA INVENTARIO
    TxtBusquedaProducto.onkeyup = (ev) => {
        const parametro = ev.target.value;
        const InvenFiltrados = response[5].filter(x => x.producto.includes(parametro));
        CreateTable(InvenFiltrados, TableProducto);
    }

    //TABLA PARA DETALLES
    function creaTabla() {
        let body = document.getElementById(""body"");
        body.innerHTML = """";
        DetallesVenta.forEach((detalles) => {
           ");
            WriteLiteral(@" let fila = document.createElement(""tr"");
            fila.innerHTML = `
                             <td hidden=""true"" >${detalles.IdProducto}</td>
                             <td hidden=""true"" >${detalles.IdInventario}</td>
                             <td>${TxtNproducto.value}</td>
                             <td>${detalles.Precio}</td>
                             <td>${detalles.Cantidad}</td>
                             <td>${detalles.IdMedida}</td>
                             <td>${detalles.Subtotal}</td>
                             <td>${detalles.IVA}</td>
                             <td>${detalles.Descuento}</td>
                             <td>${detalles.Total}</td>`
            let eliminar = document.createElement(""td"");
            let btnEliminar = document.createElement(""button"")

            btnEliminar.classList.add(""BTNEliminar"");
            btnEliminar.innerText = ""Eliminar"";

            eliminar.appendChild(btnEliminar);
            fila.appendChild(eliminar);
 ");
            WriteLiteral(@"           body.appendChild(fila);

            btnEliminar.onclick = (obejetDet = {}) => {
                obejetDet.target.parentNode.parentNode.remove();
                const Eliminar = DetallesVenta.indexOf(obejetDet);
                DetallesVenta.splice(Eliminar, 1);
                console.log(DetallesVenta);
            }
        })


    }

    //VERIFICAR ARTICULO REPETIDO
    const InsertarProducto = (objDetalle) => {
        const repetido = DetallesVenta.find((detalle) => {
            if (objDetalle.IdProducto == detalle.IdProducto) {
                return detalle;
            }
        });

        if (repetido) {
            DetallesVenta = DetallesVenta.map((detalle) => {
                if (detalle.IdProducto == objDetalle.IdProducto) {
                    return {
                        IdInventario: detalle.IdInventario,
                        IdProducto: detalle.IdProducto,
                        Precio: detalle.Precio,
                        Cantidad: +d");
            WriteLiteral(@"etalle.Cantidad + +objDetalle.Cantidad,
                        IdMedida: detalle.IdMedida,
                        Subtotal: +detalle.Subtotal + +objDetalle.Subtotal,
                        IVA: +detalle.IVA + +objDetalle.IVA,
                        Descuento: +detalle.Descuento + +objDetalle.Descuento,
                        Total: +detalle.Total + +objDetalle.Total
                    };
                }
                return detalle;
            });

        }
        else {
            DetallesVenta.push(objDetalle);
            console.log(DetallesVenta)
        }
    };

    btnDetalle.onclick = async (Objdetalle = {}) => {

        Objdetalle = {
            IdInventario: TxtInvent.value,
            IdProducto: Txtproducto.value,
            Precio: Txtprecio.value,
            Cantidad: Txtcantidad.value,
            IdMedida: DropMedida.value,
            Subtotal: txtsubtotal.value,
            IVA: Txtiva.value,
            Descuento: TxtDescuento.value,
        ");
            WriteLiteral(@"    Total: Txttotal.value
        }


        let flag = true;
        for (var prop in Objdetalle) {
            if (Objdetalle[prop] === """") {
                flag = false;
                alert(""la propiedad "" + prop + "" es requerida"");
                break;
            }
        }

        if (!flag) {
            return;
        }

        InsertarProducto(Objdetalle)
        //DetallesVenta.push(Objdetalle);
        console.log(DetallesVenta);
        creaTabla();

        // SUMA TOTAL DETALLES
        function sumaTotales(DetallV) {
            const suma = DetallV.map(D => D.Total).reduce((a, v) => parseFloat(a) + parseFloat(v), 0);
            TxttotalV.value = suma;

        }

        sumaTotales(DetallesVenta);

        //LIMPIA TXT DESPUES DE GUARDAR
        Txtproducto.value = """"
        TxtNproducto.value = """"
        Txtcantidad.value = """"
        TxtInvent.value = """"
        Txtprecio.value = """"
        Txtiva.value = """"
        txtsubtotal.value = """"
");
            WriteLiteral(@"        Txttotal.value = """"
        TxtDescuento.value = """"
        DropMedida.value = ""0""

        if (DetallesVenta.length != 0) {
            BtnSave.disabled = false;
        } else {
            BtnSave.disabled = true;
        }

    }


    //function CreaFactura() {
    //    let cuerpo2 = document.getElementById(""cuerpo2"");
    //    cuerpo2.innerHTML = """";
    //    let subtotal = DetallesVenta.map(S => S.Subtotal).reduce((a, v) => parseFloat(a) + parseFloat(v), 0)

    //    DetallesVenta.forEach((detalles) => {

    //        let fila = document.createElement(""tr"");
    //        fila.innerHTML = `

    //        <td class=""td-item"">${detalles.IdProducto}</td>
    //        <td class=""td-item"">${detalles.Cantidad}</td>
    //        <td class=""td-item"">${detalles.Precio}</td>
    //        <td class=""td-item"">${detalles.Total}</td>
    //        `
    //        cuerpo2.appendChild(fila);
    //    })
    //    let fila2 = document.createElement(""tr"");
    //    fila2");
            WriteLiteral(@".innerHTML = `

    //        <td colspan=""2"" rowspan=""3"" valign=""bottom""</td>
    //        <td class=""td-item""><p class=""item-2"">SubTotal</p></td>
    //        <td class=""item-3""><p>${subtotal}</p></td>
           
    //        `
    //    cuerpo2.appendChild(fila2);
   // }

    /*GUARDA VENTA*/



    window.onload = async () => {


        //CreaFactura()

        //if (DetallesVenta.length == 0) {
        //    BtnSave.disabled = ""true"";
        //} else {
        //    BtnSave.disabled = ""false"";
        //}

        BtnSave.onclick = async () => {
            let UrlVenta = ""../../api/Venta/GuardarVenta"";
            const ObjInst = {
                IdVenta: TxtVenta.value,
                Fecha: Txtfecha.value,
                Descripcion: Txtdescripcion.value,
                Cliente: DropCliente.value,
                IdUsuario: DropUsuario.value,
                Total: TxttotalV.value,
                Estado: DropEstado.value,
                DetallesV: Detall");
            WriteLiteral(@"esVenta

            }
            let flag = true;
            for (var prop in ObjInst) {
                if (ObjInst[prop] == """") {
                    flag = false;
                    alert(""la propiedad "" + prop + "" es requerida"");
                    break;
                }
            }

            if (!flag) {
                return;
            }

            let response = await fetch(UrlVenta, {
                method: ""POST"",
                headers: {
                    'Content-Type': ""application/json; charset=utf-8"",
                    'Accept': ""*/*""
                },
                body: JSON.stringify(ObjInst)
            });
            response = await response.json();
            if (response == true) {
                alert(""Datos Guardados"");
                CargarDatos();
                location.reload()
            }

            DropProveedor.value = 0;
            Txtdescripcion.value = """"
            DropUsuario.value = 0;
            Txtt");
            WriteLiteral(@"otalV.value = """";
        }
        CargarDatos();

        BtnModalProducto.onclick = () => {
            ModalFunction(ModalProducto);
        }
        BtnCerrarProducto.onclick = () => {
            ModalFunction(ModalProducto);
        }


    }



</script>

<style>
    .contenedor {
        width: 900px !important;
        height: 842px !important;
        margin: auto;
    }

    .pie_pagina {
        position: fixed;
        width: 100%;
        text-align: center;
        bottom: 0;
        margin: auto;
    }

    body {
        font-family: Arial, Helvetica, sans-serif
    }

    p.title {
        font-weight: bold;
    }

    p.title2 {
        font-weight: bold;
        color: #03A99F;
        font-size: 20px;
    }

    p.text {
        font-size: 15px;
        font-weight: 100;
        color: #858585;
    }

    p {
        margin: 0px
    }

    .tbth {
        text-align: left;
    }

    table.tbproductos {
        border-collaps");
            WriteLiteral(@"e: separate;
        border-spacing: 4px;
    }

        table.tbproductos thead tr th {
            background-color: #03A99F;
            padding: 10px;
            font-size: 15px;
            color: white;
        }

        table.tbproductos tbody tr td {
            padding: 10px;
        }

    .item {
        font-size: 15px;
        font-weight: 100;
        color: #757575;
    }

    .item-2 {
        font-size: 15px;
        font-weight: bold;
        color: #757575;
    }

    .item-3 {
        font-size: 15px;
        font-weight: bold;
        background-color: #03A99F;
        color: white;
    }

    .td-item {
        border-bottom: 2px solid #E8E8E8 !important;
    }
</style>

");
            WriteLiteral(@"<div class=""FrmContainerDetalleV"">

    <div hidden=""true"">
        IdVenta:
        <input class=""TxtForm"" type=""number"" id=""TxtVenta"" placeholder=""Propiedad..."" value=""-1"" />
    </div>
    <div>
        Fecha:
        <input class=""TxtForm"" type=""date"" id=""Txtfecha"" placeholder=""Propiedad..."" />
    </div>

    <div>
        Descripcion:
        <input class=""TxtForm"" type=""text"" id=""Txtdescripcion"" placeholder=""Propiedad..."" />
    </div>

    <div>
        Cliente:
        <select class=""TxtForm"" id=""DropCliente"">
            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "25571cf44e6e664951ff6fd2dc8eeb8c4c614dbf17503", async() => {
                WriteLiteral("Seleccionar Cliente");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        </select>\r\n    </div>\r\n\r\n    <div>\r\n        Usuario:\r\n        <select class=\"TxtForm\" id=\"DropUsuario\">\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "25571cf44e6e664951ff6fd2dc8eeb8c4c614dbf18817", async() => {
                WriteLiteral("Seleccionar Usuario");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
        </select>
    </div>

    <div>
        Total:
        <input class=""TxtForm"" type=""number"" id=""TxttotalV"" placeholder=""Propiedad..."" disabled />
    </div>

    <div>
        Estado:
        <select class=""TxtForm"" id=""DropEstado"">
            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "25571cf44e6e664951ff6fd2dc8eeb8c4c614dbf20265", async() => {
                WriteLiteral("Activo");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "25571cf44e6e664951ff6fd2dc8eeb8c4c614dbf21437", async() => {
                WriteLiteral("Inactivo");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        </select>\r\n    </div>\r\n    <div>\r\n        <input class=\"BtnGuardarV\" type=\"button\" id=\"BtnSave\" value=\"Guardar\" />\r\n\r\n    </div>\r\n</div>\r\n\r\n\r\n");
            WriteLiteral(@"
<div class=""FrmContainerDetalleV"">

    <div hidden=""true"">
        IdProducto:
        <input class=""TxtForm"" type=""number"" id=""Txtproducto"" placeholder=""Producto"" disabled />
    </div>

    <div style=""display:flex;"">
        <div>
            Producto:
            <input class=""TxtForm"" type=""text"" id=""TxtNproducto"" placeholder=""Producto"" disabled />
        </div>

        <input type=""button"" id=""BtnModalProducto"" class=""BtnGuardarV"" value=""+"" style=""height:40px; margin-top:30px;margin-left:20px"" />
    </div>

    <div hidden=""true"">
        IdInventario:
        <input class=""TxtForm"" type=""number"" id=""TxtInvent"" disabled />
    </div>

    <div>
        Cantidad:
        <input class=""TxtForm"" type=""number"" id=""Txtcantidad"" />
    </div>

    <div>
        Medida:
        <select class=""TxtForm"" id=""DropMedida"">
            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "25571cf44e6e664951ff6fd2dc8eeb8c4c614dbf23733", async() => {
                WriteLiteral("Seleccionar Medida");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
        </select>
    </div>

    <div>
        Precio:
        <input class=""TxtForm"" type=""number"" id=""Txtprecio"" placeholder=""Propiedad..."" disabled />
    </div>

    <div hidden=""true"">
        Subtotal:
        <input class=""TxtForm"" type=""number"" id=""txtsubtotal"" placeholder=""Propiedad..."" disabled />
    </div>

    <div hidden=""true"">
        IVA:
        <input class=""TxtForm"" type=""number"" id=""Txtiva"" placeholder=""Propiedad..."" disabled />
    </div>

    <div>
        Descuento:
        <input class=""TxtForm"" type=""number"" id=""TxtDescuento"" placeholder=""Propiedad..."" disabled />
    </div>

    <div hidden=""true"">
        Total:
        <input class=""TxtForm"" type=""number"" id=""Txttotal"" placeholder=""Propiedad..."" disabled />
    </div>
    <div>
        <button class=""BtnGuardarV"" id=""btnDetalle"" style=""margin-top:32px"">Guardar Detalles</button>
    </div>



</div>



");
            WriteLiteral(@"<table class=""TablaDetalle"">
    <thead>
        <tr>
            <td hidden=""true"">IdInventario</td>
            <td hidden=""true"">IdProducto</td>
            <td>Articulo</td>
            <td>Precio</td>
            <td>Cantidad</td>
            <td>Medida</td>
            <td>Subtotal</td>
            <td>IVA</td>
            <td>Descuento</td>
            <td>Total</td>
            <td>Eliminar</td>
        </tr>
    </thead>
    <tbody id=""body"">
    </tbody>

</table>

");
            WriteLiteral(@"<!--<div>
    <input type=""text"" class=""TxtFormDetalle"" id=""TxtBusquedaVenta"" placeholder=""Buscar..."" value="""" />
    <table id=""TableVenta"" class=""FrmTable"">
        <thead>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>-->
");
            WriteLiteral("<div class=\"ModalContent\" id=\"ModalProducto\">\r\n\r\n    <div class=\"ContainerForm\">\r\n        <div style=\" display:flex; justify-content:flex-end\">\r\n            <input");
            BeginWriteAttribute("class", " class=\"", 16273, "\"", 16281, 0);
            EndWriteAttribute();
            WriteLiteral(@" type=""button"" id=""BtnCerrarProducto"" value=""X"" style=""background-color: red; border: none; font-weight: 100; outline: none;color:aliceblue"" />
        </div>
        <input type=""text"" id=""TxtBusquedaProducto"" class=""TxtFormDetalle"" placeholder=""Buscar...""");
            BeginWriteAttribute("value", " value=\"", 16541, "\"", 16549, 0);
            EndWriteAttribute();
            WriteLiteral(@" />
        <table id=""TableProducto"" class=""FrmTable"">
            <thead>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>

<div class=""ModalContent"" id=""ModalAlerta"">
    <h3> Venta Guardada Exitosamente</h3>
    <input class=""BTN BTNOK2"" type=""button"" id=""BtnAceptar"" value=""Aceptar"" />
</div>


<!--<div id=""ModalFactura"">-->
");
            WriteLiteral(@"    <!--<div class=""contenedor"">

        <table style=""width:100%"" id=""idventa"">
            <tr>
                <td>
                    <img src=""~/Image/reporte.png"" style=""width: 250px;"" />
                </td>
                <td style=""text-align:right"">
                    <table style=""margin-right:0;margin-left:auto"">
                        <tr><td><p class=""title2"">NÚMERO VENTA</p></td></tr>
                        <tr><td>numeroventa:</td></tr>
                    </table>
                </td>
            </tr>
        </table>
        <br />
        <table style=""width:100%"">
            <tr>
                <td>
                    <table>
                        <tr>
                            <td>
                                <p class=""title"">TIENDA EL HERMANO</p>
                            </td>
                        </tr>
                        <tr>
                            <td><p class=""text"">Direccion: Av. Amarilis Park 123</p></td>
               ");
            WriteLiteral(@"         </tr>
                        <tr>
                            <td>
                                <p class=""text"">Correo: ELHERMANOe@example.com</p>
                            </td>
                        </tr>
                    </table>
                </td>
                <td style=""text-align:right"">
                    <table style=""margin-right:0;margin-left:auto"">
                        <tr>
                            <td><p class=""title"">CLIENTE</p></td>
                        </tr>
                        <tr>
                            <td><p class=""text"">nombrecliente</p></td>
                        </tr>
                        <tr>
                            <td><p class=""text"">correocliente</p></td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
        <br />
        <br />

        <table class=""tbproductos"" style=""width:100%"">
            <thead>
                <tr>
        ");
            WriteLiteral(@"            <th class=""tbth"">Producto</th>
                    <th class=""tbth"" style=""width:130px"">Cantidad</th>
                    <th class=""tbth"" style=""width:130px"">Precio</th>
                    <th class=""tbth"" style=""width:130px"">Total</th>
                </tr>
            </thead>
            <tbody id=""cuerpo2"">-->
");
            WriteLiteral(@"
                <!--<tr>
                    <td colspan=""2"" rowspan=""3"" valign=""bottom"">
                    </td>
                    <td class=""td-item"">
                        <p class=""item-2"">SubTotal</p>
                    </td>
                    <td class=""item-3"">
                        <p>subtotal</p>
                    </td>
                </tr>
                <tr>-->
");
            WriteLiteral(@"                    <!--<td class=""td-item"">
                        <p class=""item-2"">IVA</p>
                    </td>
                    <td class=""item-3"">
                        <p>impuesto</p>
                    </td>
                </tr>
                <tr>-->
");
            WriteLiteral(@"                    <!--<td class=""item-3"">
                        <p>Total</p>
                    </td>
                    <td class=""item-3"">
                        <p>total</p>
                    </td>
                </tr>
            </tbody>
        </table>

    </div>

</div>-->

");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<PROYECTO_TIENDA.Pages.Catalogos.MaestroDetalle.VentaViewModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<PROYECTO_TIENDA.Pages.Catalogos.MaestroDetalle.VentaViewModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<PROYECTO_TIENDA.Pages.Catalogos.MaestroDetalle.VentaViewModel>)PageContext?.ViewData;
        public PROYECTO_TIENDA.Pages.Catalogos.MaestroDetalle.VentaViewModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
=======
#pragma checksum "C:\Sistema\COMPV2022-G5\PROYECTO_PRACTICAS\PROYECTO_TIENDA\Pages\Catalogos\MaestroDetalle\VentaView.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "67074cfbfd188a0c273c47825fcb877f8678ea83"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(PROYECTO_TIENDA.Pages.Catalogos.MaestroDetalle.Pages_Catalogos_MaestroDetalle_VentaView), @"mvc.1.0.razor-page", @"/Pages/Catalogos/MaestroDetalle/VentaView.cshtml")]
namespace PROYECTO_TIENDA.Pages.Catalogos.MaestroDetalle
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Sistema\COMPV2022-G5\PROYECTO_PRACTICAS\PROYECTO_TIENDA\Pages\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Sistema\COMPV2022-G5\PROYECTO_PRACTICAS\PROYECTO_TIENDA\Pages\_ViewImports.cshtml"
using PROYECTO_TIENDA;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Sistema\COMPV2022-G5\PROYECTO_PRACTICAS\PROYECTO_TIENDA\Pages\_ViewImports.cshtml"
using PROYECTO_TIENDA.Data;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"67074cfbfd188a0c273c47825fcb877f8678ea83", @"/Pages/Catalogos/MaestroDetalle/VentaView.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1589a794a507b402e5738872327c01bae8496fb4", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Catalogos_MaestroDetalle_VentaView : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "0", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Activo", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Inactivo", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<script type=""module"">
    import CreateTable from '../../js/TableComponent.js';
    import CreateDropDown from '../../js/DropDownComponent.js';
    const DetallesVenta = [];
    let venta;

    const CargarDatos = async () => {
        let UrlVenta = ""../../api/Venta/VerVenta"";
        let response = await fetch(UrlVenta, {
            method: ""POST"",
            headers: {
                'Content-Type': ""application/json; charset=utf-8"",
                'Accept': ""*/*""
            }
        });
        response = await response.json();
        venta = response[0]

        //CARGAR TODOS LAS LISTAS
        console.log(response);

        //CARGA TABLA COMPRA
        CreateTable(venta, TableVenta);

        //MODAL INVENTARIO
        CreateTable(response[5], TableProducto, FunctionSeleccionar, ""Seleccionar"");

        //DROPDOWN
        CreateDropDown(response[3], DropUsuario, ""idUsuario"", ""usuario"")
        CreateDropDown(response[1], DropCliente, ""idCliente"", ""nombres"")
      ");
            WriteLiteral(@"  CreateDropDown(response[4], DropMedida, ""idMedida"", ""medida"")

    }
    //SELECCION DE ITEM DE INVENTARIO
    const FunctionSeleccionar = async (Item) => {
        Txtproducto.value = Item.idProducto;
        TxtNproducto.value = Item.nombreProducto;
        TxtInvent.value = Item.idInventario;
        Txtprecio.value = Item.precioCompra;
        ModalFunction(ModalProducto)
    }

    //CALCULO DE PORCENTAJES
    Txtcantidad.onkeyup = (ev) => {
        //const stockTotal = parseInt(TxtStockActual.value) + parseInt(ev.target.value);
        //if (stockTotal > TxtStockMaximo.value) {
        //    alert('Cantidad Ingresada mayor al Stock, Revisa el Inventario')
        //    ModalFunction(ModalProducto)
        //}
        txtsubtotal.value = Txtprecio.value * ev.target.value;
        Txtiva.value = txtsubtotal.value * 0.15;
        Txttotal.value = parseFloat(txtsubtotal.value) + parseFloat(Txtiva.value);
    }

    //CALCULO DE DESCUENTO
    TxtDescuento.onkeyup = (ev) => {
     ");
            WriteLiteral(@"   Txttotal.value = parseFloat(Txttotal.value) - ev.target.value;
    }

    ////TEXTO DE BUSQUEDA
    TxtBusquedaVenta.onkeyup = (ev) => {
        const parametro = ev.target.value;
        const VentaFiltrados = venta.filter(x => x.descripcion.includes(parametro));
        CreateTable(VentaFiltrados, TableVenta);
    }

    ////TEXTO DE BUSQUEDA INVENTARIO
    TxtBusquedaProducto.onkeyup = (ev) => {
        const parametro = ev.target.value;
        const InvenFiltrados = response[5].filter(x => x.producto.includes(parametro));
        CreateTable(InvenFiltrados, TableProducto);
    }


    ////// TABLA PARA DETALLE
    export default function CreateTableDetalle(Dataset = [], Table, TableFunction, BtnValue = ""Eliminar"") {
        const thead = Table.querySelector(""thead""); //dataset= response, table=nombre de la tabla-tableproducto,?,?
        const tbody = Table.querySelector(""tbody"");//tbody = cuerpo de tabla, thead=encabezado de tabla
        thead.innerHTML = """";
        tbody.inn");
            WriteLiteral(@"erHTML = """";
        Dataset.forEach((item, index) => {
            const row = document.createElement(""tr"");//filas
            for (var prop in item) {

                if (index == 0) {

                    const th = document.createElement(""th"");//encabezados
                    th.innerText = prop;
                    thead.append(th);
                }
                const td = document.createElement(""td""); //tabledata
                td.innerText = item[prop];
                row.append(td);
            }
            if (index == 0) {
                const th = document.createElement(""th"");
                th.innerText = ""Eliminar"";
                thead.append(th);

            }
            const tdAction = document.createElement(""td"");
            const btn = document.createElement(""input"");
            btn.type = ""button"";
            btn.className = ""BTN BTNOK"";
            btn.value = BtnValue;
            btn.onclick = (obejetDet = {}) => {
                obejetDet.t");
            WriteLiteral(@"arget.parentNode.parentNode.remove();
                const Eliminar = DetallesVenta.indexOf(obejetDet);
                DetallesVenta.splice(Eliminar, 1);
                console.log(DetallesVenta);
            }
            tdAction.append(btn);
            row.append(tdAction);

            tbody.append(row);
        });
    }

    btnDetalle.onclick = async (Objdetalle = {}) => {
        let cantidad = document.getElementById('Txtcantidad');
        let producto = document.getElementById('Txtproducto');


        if (TxtDescuento.value == """" || undefined) TxtDescuento.value = 0

        if (cantidad.value === '' || producto.value === '') {
            alert('Rellena el todos los campos')


        } else {

            Objdetalle = {
                IdInventario: TxtInvent.value,
                IdProducto: Txtproducto.value,
                Precio: Txtprecio.value,
                Cantidad: Txtcantidad.value,
                IdMedida: DropMedida.value,
                Subto");
            WriteLiteral(@"tal: txtsubtotal.value,
                IVA: Txtiva.value,
                Descuento: TxtDescuento.value,
                Total: Txttotal.value
            }
        }
        DetallesVenta.push(Objdetalle);
        console.log(DetallesVenta);

        DetallesVenta.forEach((objeto) => {
            CreateTableDetalle(DetallesVenta, TableVD);

        })
        // SUMA TOTAL DETALLES
        function sumaTotales(DetallV) {
            const suma = DetallV.map(D => D.Total).reduce((a, v) => parseInt(a) + parseInt(v), 1);
            TxttotalV.value = suma;

        }
        sumaTotales(DetallesVenta);


        //MODALDETALLE
        ModalFunction(ModalDetalle);

        //Txtproducto.value = """"
        //TxtNproducto.value = """"
        //Txtcantidad.value = """"
        //TxtInvent.value = """"
        //Txtprecio.value = """"
        //Txtiva.value = """"
        //txtsubtotal.value = """"
        //Txttotal.value = """"
        //TxtDescuento.value = """"
    }

    /*GUARDA VENTA*/");
            WriteLiteral(@"

    window.onload = async () => {
        BtnSave.onclick = async () => {
            let UrlVenta = ""../../api/Venta/GuardarVenta"";
            const ObjInst = {
                IdVenta: TxtVenta.value,
                Fecha: Txtfecha.value,
                Descripcion: Txtdescripcion.value,
                Cliente: DropCliente.value,
                IdUsuario: DropUsuario.value,
                Total: TxttotalV.value,
                Estado: DropEstado.value,
                DetallesV: DetallesVenta

            }
            let flag = true;
            for (var prop in ObjInst) {
                if (ObjInst[prop] == """") {
                    flag = false;
                    alert(""la propiedad "" + prop + "" es requerida"");
                    break;
                }
            }

            if (!flag) {
                return;
            }

            let response = await fetch(UrlVenta, {
                method: ""POST"",
                headers: {
                    ");
            WriteLiteral(@"'Content-Type': ""application/json; charset=utf-8"",
                    'Accept': ""*/*""
                },
                body: JSON.stringify(ObjInst)
            });
            response = await response.json();
            if (response == true) {
                alert(""Datos Guardados"");
                CargarDatos();
                location.reload()
            }

            DropProveedor.value = 0;
            Txtdescripcion.value = """"
            DropUsuario.value = 0;
            TxttotalV.value = """";
        }
        CargarDatos();

        BtnModalProducto.onclick = () => {
            ModalFunction(ModalProducto);
        }
        BtnCerrarProducto.onclick = () => {
            ModalFunction(ModalProducto);
        }

        BtnModalDetalle.onclick = () => {
            ModalFunction(ModalDetalle);
        }
        BtnCerrarD.onclick = () => {
            ModalFunction(ModalDetalle);
        }
    }
    


</script>

");
            WriteLiteral(@"<div class=""FrmContainer"">

    <div hidden=""true"">
        IdVenta:
        <input class=""TxtForm"" type=""number"" id=""TxtVenta"" placeholder=""Propiedad..."" value=""-1"" />
    </div>
    <div>
        Fecha:
        <input class=""TxtForm"" type=""date"" id=""Txtfecha"" placeholder=""Propiedad..."" />
    </div>

    <div>
        Descripcion:
        <input class=""TxtForm"" type=""text"" id=""Txtdescripcion"" placeholder=""Propiedad..."" />
    </div>

    <div>
        Cliente:
        <select class=""TxtForm"" id=""DropCliente"">
            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "67074cfbfd188a0c273c47825fcb877f8678ea8313441", async() => {
                WriteLiteral("Seleccionar Cliente");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        </select>\r\n    </div>\r\n\r\n    <div>\r\n        Usuario:\r\n        <select class=\"TxtForm\" id=\"DropUsuario\">\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "67074cfbfd188a0c273c47825fcb877f8678ea8314755", async() => {
                WriteLiteral("Seleccionar Usuario");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
        </select>
    </div>

    <div>
        Total:
        <input class=""TxtForm"" type=""number"" id=""TxttotalV"" placeholder=""Propiedad..."" disabled />
    </div>

    <div>
        Estado:
        <select class=""TxtForm"" id=""DropEstado"">
            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "67074cfbfd188a0c273c47825fcb877f8678ea8316203", async() => {
                WriteLiteral("Activo");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "67074cfbfd188a0c273c47825fcb877f8678ea8317375", async() => {
                WriteLiteral("Inactivo");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        </select>\r\n    </div>\r\n</div>\r\n\r\n");
            WriteLiteral(@"
<div class=""ModalContentDetalle"" id=""ModalDetalle"">

    <div class=""FrmContainerDetalle"">

        <div hidden=""true"">
            IdProducto:
            <input class=""TxtForm"" type=""number"" id=""Txtproducto"" placeholder=""Producto"" disabled />
        </div>

        <div style=""display:flex;"">
            <div>
                Producto:
                <input class=""TxtForm"" type=""text"" id=""TxtNproducto"" placeholder=""Producto"" disabled />
            </div>

            <input type=""button"" id=""BtnModalProducto"" class=""BTN BTNOK2"" value=""Insertar Producto"" style=""height:40px; margin-top:30px;margin-left:20px"" />
        </div>

        <div hidden=""true"">
            IdInventario:
            <input class=""TxtForm"" type=""number"" id=""TxtInvent"" disabled />
        </div>

        <div>
            Cantidad:
            <input class=""TxtForm"" type=""number"" id=""Txtcantidad"" />
        </div>

        <div>
            Medida:
            <select class=""TxtForm"" id=""DropMedida"">");
            WriteLiteral("\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "67074cfbfd188a0c273c47825fcb877f8678ea8319745", async() => {
                WriteLiteral("Seleccionar Medida");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </select>
        </div>

        <div>
            Precio:
            <input class=""TxtForm"" type=""number"" id=""Txtprecio"" placeholder=""Propiedad..."" disabled />
        </div>

        <div>
            Subtotal:
            <input class=""TxtForm"" type=""number"" id=""txtsubtotal"" placeholder=""Propiedad..."" disabled />
        </div>

        <div>
            IVA:
            <input class=""TxtForm"" type=""number"" id=""Txtiva"" placeholder=""Propiedad..."" disabled />
        </div>

        <div>
            Descuento:
            <input class=""TxtForm"" type=""number"" id=""TxtDescuento"" placeholder=""Propiedad..."" />
        </div>

        <div>
            Total:
            <input class=""TxtForm"" type=""number"" id=""Txttotal"" placeholder=""Propiedad..."" disabled />
        </div>


        <div>
            <button class=""BTN BTNOK2"" id=""btnDetalle"">Guardar Detalles</button>
            <input class=""BTN BTNOK2"" type=""button"" id=""BtnCerrarD"" value=""Cerrar"" style=""margin-to");
            WriteLiteral("p:30px\" />\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n");
            WriteLiteral(@"<div class=""FrmContainer"">
    <div>
        <input class=""BTN BTNOK2"" type=""button"" id=""BtnSave"" value=""Guardar"" />
        <input class=""BTN BTNOK2"" type=""button"" id=""BtnModalDetalle"" value=""Insertar Detalle"" style=""margin-right:120px"" />
    </div>


</div>


");
            WriteLiteral("\r\n");
            WriteLiteral("<div>\r\n    <input type=\"text\" class=\"TxtFormDetalle\" id=\"TxtBusquedaVenta\" placeholder=\"Buscar...\"");
            BeginWriteAttribute("value", " value=\"", 12064, "\"", 12072, 0);
            EndWriteAttribute();
            WriteLiteral(" />\r\n    <table id=\"TableVenta\" class=\"FrmTable\">\r\n        <thead>\r\n        </thead>\r\n        <tbody>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n");
            WriteLiteral("<table id=\"TableVD\" class=\"FrmTable\">\r\n    <thead>\r\n    </thead>\r\n    <tbody>\r\n    </tbody>\r\n</table>\r\n\r\n\r\n");
            WriteLiteral("<div class=\"ModalContent\" id=\"ModalProducto\">\r\n    <div class=\"ContainerForm\" style=\"width:max-content\">\r\n        <input type=\"text\" id=\"TxtBusquedaProducto\" class=\"TxtFormDetalle\" placeholder=\"Buscar...\"");
            BeginWriteAttribute("value", " value=\"", 12586, "\"", 12594, 0);
            EndWriteAttribute();
            WriteLiteral(@" />
        <table id=""TableProducto"" class=""FrmTable"">
            <thead>
            </thead>
            <tbody>
            </tbody>
        </table>

        <div class=""FrmContainer"">
            <div>
                <input class=""BTN BTNOK2"" type=""button"" id=""BtnCerrarProducto"" value=""Cerrar"" />
            </div>
        </div>
    </div>
</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<PROYECTO_TIENDA.Pages.Catalogos.MaestroDetalle.VentaViewModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<PROYECTO_TIENDA.Pages.Catalogos.MaestroDetalle.VentaViewModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<PROYECTO_TIENDA.Pages.Catalogos.MaestroDetalle.VentaViewModel>)PageContext?.ViewData;
        public PROYECTO_TIENDA.Pages.Catalogos.MaestroDetalle.VentaViewModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
>>>>>>> 41c719d25a772fe85e3601dee3320ea0cfe88d19
